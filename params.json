{"name":"Rulerbundle","tagline":"A simple stateless production rules engine for Symfony 2","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"RulerBundle\r\n===========\r\n\r\n[![Build Status](https://secure.travis-ci.org/rezzza/RulerBundle.png)](http://travis-ci.org/rezzza/RulerBundle)\r\n\r\nA simple stateless production rules engine for Symfony 2.\r\n\r\nRoadmap\r\n=======\r\n\r\n- Create dynamically Propositions via a Form and persist them on storage.\r\n- Create a DSL to insert/fetch on storage. (using hoa/compiler ?)\r\n- Create a standalone library + a bundle.\r\n\r\n# Configuration\r\n\r\n```\r\nrezzza_ruler:\r\n\tinferences:\r\n\t\tcart.price_total:\r\n\t\t\ttype:        decimal\r\n\t\t\tdescription: Cart total price is\r\n\t\tcart.created_at:\r\n\t\t\ttype:        date\r\n\t\t\tdescription: Cart was created at\r\n\t\tcart.contain_product:\r\n\t\t\ttype:        product\r\n\t\t\t# Your own asserter (see chapter Add an asserter)\r\n\t\t\t# You'll return a list of product as array.\r\n            # Not yet implemented, we'll have to finish ui via forms.\r\n\t\t\tdescription: Cart contain product\r\n```\r\n\r\n# Usage\r\n\r\n```php\r\n<?php\r\n\r\n//use Ruler\\Rule;\r\n//use Ruler\\Operator;\r\n//use Ruler\\Context;\r\n\r\n$inferenceContainer = $container->get('rezzza.ruler.inference_container');\r\n\r\n$rule = new Rule(\r\n    new Operator\\LogicalAnd(array(\r\n        $inferenceContainer->get('cart.price_total')->createProposition('>=', 100),\r\n        $inferenceContainer->get('cart.created_at')->createProposition('>=', '2011-06-10'),\r\n    ))\r\n);\r\n\r\n$context = new Context();\r\n$context['cart.price_total'] = 110;\r\n$context['cart.created_at'] = new \\DateTime();\r\n\r\necho $rule->evaluate($context) ? 'OK': 'NOPE'; // OK;\r\n```\r\n\r\n# Serialization\r\n\r\nTo store rules on a storage, you can serialize it, store it on storage, fetch it from storage, and deserialize it. Context does not stay on storage.\r\n\r\n```php\r\n$factory = $container->get('rezzza.ruler.factory');\r\n\r\n$rule = new Rule(\r\n    new Operator\\LogicalAnd(array(\r\n        $inferenceContainer->get('cart.price_total')->createProposition('>=', 100),\r\n        $inferenceContainer->get('cart.created_at')->createProposition('>=', '2011-06-10'),\r\n    ))\r\n);\r\n\r\n$data = $factory->serialize($rule); // will return a linear serialization of object.\r\n\r\n$rule = $factory->unserialize($data); // will be equals to $rule above :).\r\n```\r\n\r\n# Add an asserter.\r\n\r\nIn this example, we'll create `product` asserter, this one will fetch on storage a list of products.\r\n\r\n## 1) Create asserter class\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\Asserter\\Product;\r\n\r\nuse Rezzza\\RulerBundle\\Ruler\\Asserter\\AbstractAsserter;\r\nuse Rezzza\\RulerBundle\\Ruler\\Asserter\\AsserterInterface;\r\n\r\nclass Product extends AbstractAsserter implements AsserterInterface\r\n{\r\n    public function __construct()\r\n    {\r\n        // here we have to define operators and them callback.\r\n,\r\n        // $left  is the product id you choosed on UI (WIP)\r\n        // $right is what you entered on context with key \"cart.contain_product\"\r\n        // We suppose here $right is an array and we would check if $left is in $right.\r\n\r\n        $this->operators['contains'] = function ($left, $right) {\r\n            return in_array($left, $right);\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n## 2) Define the service and tag it.\r\n\r\n```xml\r\n<services>\r\n    <service id=\"acme.bundle.asserter.product\" class=\"\\Acme\\Bundle\\Asserter\\Product\">\r\n        <tag name=\"rezzza.ruler.asserter\" id=\"product\" />\r\n        <! --- here, product is the KEY used on config.yml, important ! -->\r\n    </service>\r\n</service>\r\n\r\n```\r\n\r\nThat's all folks !\r\n\r\nGlossary\r\n==========\r\n\r\n- Inference:   A group of proposition\r\n- Proposition: A rule attached to an inference.\r\n\r\nAny idea, suggestion ? [Create an issue](https://github.com/rezzza/RulerBundle/issues/new).\r\n"}